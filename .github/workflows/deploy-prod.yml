name: 🌟 Deploy Production (with Retry)

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

env:
  NODE_VERSION: '22'
  ENVIRONMENT: 'production'
  # Registry configuration
  REGISTRY_URL: 'registry-prod.gerson-prudencio.com.br'
  IMAGE_NAME: 'fiap-react-deploy'

jobs:
  # Job 1: Validação completa antes do deploy de produção
  pre-deploy:
    name: 🔍 Pre-Deploy Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --force

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🧪 Run full test suite
        run: npm run test:coverage
        env:
          CI: true

      - name: 🔒 Security audit
        run: npm audit --audit-level=high

      - name: 📊 Upload Coverage for Production Deploy
        uses: actions/upload-artifact@v4
        with:
          name: production-coverage
          path: coverage/
          retention-days: 30

  # Job 2: Build e Push para Registry de Produção com Retry
  build-prod:
    name: 🔨 Build & Push Production (with Retry)
    runs-on: ubuntu-latest
    needs: pre-deploy
    timeout-minutes: 25
    
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "🏷️ Deploying version: ${VERSION}"

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Production Registry (with Retry)
        run: |
          echo "🔑 Attempting login to production registry with retry logic..."
          
          MAX_ATTEMPTS=5
          DELAY=10
          
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "🔄 Login attempt $i/$MAX_ATTEMPTS..."
            
            if echo "${{ secrets.PROD_REGISTRY_PASSWORD }}" | docker login ${{ env.REGISTRY_URL }} -u ${{ secrets.PROD_REGISTRY_USER }} --password-stdin; then
              echo "✅ Login successful on attempt $i"
              break
            else
              echo "❌ Login failed on attempt $i"
              if [ $i -eq $MAX_ATTEMPTS ]; then
                echo "🚨 All login attempts failed!"
                exit 1
              fi
              echo "⏳ Waiting ${DELAY}s before retry..."
              sleep $DELAY
              DELAY=$((DELAY * 2))  # Exponential backoff
            fi
          done

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=FIAP React Deploy - Production
            org.opencontainers.image.description=Status App React - Production Environment
            org.opencontainers.image.vendor=FIAP
            org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}

      - name: 🔨 Build and Push Production Image (with Retry)
        id: build
        run: |
          echo "🔨 Building and pushing production image with retry logic..."
          
          MAX_ATTEMPTS=3
          DELAY=45
          
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "🔄 Build & Push attempt $i/$MAX_ATTEMPTS..."
            
            if docker buildx build \
              --context . \
              --push \
              --platform linux/amd64,linux/arm64 \
              --tag ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest \
              --tag ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }} \
              --tag ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:$(echo ${{ steps.version.outputs.VERSION }} | cut -d. -f1-2) \
              --tag ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:$(echo ${{ steps.version.outputs.VERSION }} | cut -d. -f1) \
              --label "org.opencontainers.image.title=FIAP React Deploy - Production" \
              --label "org.opencontainers.image.description=Status App React - Production Environment" \
              --label "org.opencontainers.image.vendor=FIAP" \
              --label "org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}" \
              --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%S.000Z')" \
              --build-arg VITE_ENVIRONMENT=production \
              --build-arg VITE_APP_VERSION=${{ steps.version.outputs.VERSION }} \
              --build-arg VITE_BUILD_TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%S.000Z') \
              --build-arg VITE_LOGROCKET_APP_ID=${{ secrets.VITE_LOGROCKET_ID }} \
              --build-arg VITE_LOGROCKET_PROJECT_NAME=fiap-react-deploy \
              --cache-from type=gha \
              --cache-to type=gha,mode=max; then
              
              echo "✅ Build & Push successful on attempt $i"
              echo "digest=$(docker buildx imagetools inspect ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest --format '{{.Manifest.Digest}}')" >> $GITHUB_OUTPUT
              break
            else
              echo "❌ Build & Push failed on attempt $i"
              if [ $i -eq $MAX_ATTEMPTS ]; then
                echo "🚨 All build attempts failed!"
                exit 1
              fi
              echo "⏳ Waiting ${DELAY}s before retry..."
              sleep $DELAY
              DELAY=$((DELAY + 30))  # Linear backoff increase
            fi
          done

      - name: 📊 Image Summary
        run: |
          echo "## 🐳 Production Image Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Image Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest Tag**: latest" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Tag**: ${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY

  # Job 3: Test da imagem no registry com Retry
  test-image:
    name: 🧪 Test Registry Image (with Retry)
    runs-on: ubuntu-latest
    needs: build-prod
    timeout-minutes: 20
    
    steps:
      - name: 🏷️ Get version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: 🔑 Login to Production Registry (with Retry)
        run: |
          echo "🔑 Attempting login to production registry for testing..."
          
          MAX_ATTEMPTS=3
          DELAY=10
          
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "🔄 Login attempt $i/$MAX_ATTEMPTS..."
            
            if echo "${{ secrets.PROD_REGISTRY_PASSWORD }}" | docker login ${{ env.REGISTRY_URL }} -u ${{ secrets.PROD_REGISTRY_USER }} --password-stdin; then
              echo "✅ Login successful on attempt $i"
              break
            else
              echo "❌ Login failed on attempt $i"
              if [ $i -eq $MAX_ATTEMPTS ]; then
                echo "🚨 All login attempts failed!"
                exit 1
              fi
              echo "⏳ Waiting ${DELAY}s before retry..."
              sleep $DELAY
            fi
          done

      - name: 🏥 Test Production Container from Registry (with Retry)
        run: |
          echo "🚀 Testing production image from registry with retry logic..."
          
          MAX_ATTEMPTS=3
          DELAY=30
          
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "🔄 Test attempt $i/$MAX_ATTEMPTS..."
            
            # Cleanup any existing container
            docker rm -f prod-test-container 2>/dev/null || true
            
            # Pull and test
            if docker pull ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest && \
               docker run -d --name prod-test-container -p 8080:8080 \
                 -e NODE_ENV=production \
                 -e ENVIRONMENT=production \
                 ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest; then
              
              echo "⏳ Waiting for container to be ready..."
              sleep 40
              
              # Test endpoints with retry
              if curl -f --retry 5 --retry-delay 15 --retry-connrefused http://localhost:8080/health && \
                 curl -f --retry 3 --retry-delay 10 --retry-connrefused http://localhost:8080/api/info && \
                 curl -f --retry 3 --retry-delay 10 --retry-connrefused http://localhost:8080/; then
                
                echo "✅ Production registry image tests passed on attempt $i"
                docker stop prod-test-container
                docker rm prod-test-container
                break
              else
                echo "❌ Container tests failed on attempt $i"
                docker logs prod-test-container || true
                docker stop prod-test-container 2>/dev/null || true
                docker rm prod-test-container 2>/dev/null || true
                
                if [ $i -eq $MAX_ATTEMPTS ]; then
                  echo "🚨 All test attempts failed!"
                  exit 1
                fi
                echo "⏳ Waiting ${DELAY}s before retry..."
                sleep $DELAY
              fi
            else
              echo "❌ Pull or container start failed on attempt $i"
              if [ $i -eq $MAX_ATTEMPTS ]; then
                echo "🚨 All test attempts failed!"
                exit 1
              fi
              echo "⏳ Waiting ${DELAY}s before retry..."
              sleep $DELAY
            fi
          done

      - name: 🔍 Container Security Scan
        run: |
          echo "🔒 Running container security scan..."
          # Aqui você pode adicionar ferramentas como Trivy, Snyk, etc.
          # docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          #   aquasec/trivy image ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest
          echo "✅ Security scan completed!"

  # Job 4: Deploy para Coolify (Produção) com Retry
  deploy-prod:
    name: 🌟 Deploy to Production (with Retry)
    runs-on: ubuntu-latest
    needs: test-image
    environment: production
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Get version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: 🚀 Deploy to Coolify Production (with Retry)
        run: |
          echo "🌟 Triggering Coolify deployment for production..."
          
          if [ -n "${{ secrets.COOLIFY_WEBHOOK_PROD }}" ]; then
            MAX_ATTEMPTS=3
            DELAY=20
            
            for i in $(seq 1 $MAX_ATTEMPTS); do
              echo "🔄 Deploy attempt $i/$MAX_ATTEMPTS..."
              
              if curl -X POST "${{ secrets.COOLIFY_WEBHOOK_PROD }}" \
                -H "Content-Type: application/json" \
                -d '{
                  "branch": "main",
                  "tag": "${{ env.VERSION }}",
                  "commit": "${{ github.sha }}",
                  "environment": "production",
                  "registry_url": "${{ env.REGISTRY_URL }}",
                  "image_name": "${{ env.IMAGE_NAME }}",
                  "image_tag": "latest",
                  "version_tag": "${{ env.VERSION }}",
                  "full_image": "${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest",
                  "versioned_image": "${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}",
                  "build_timestamp": "'$(date -u +'%Y-%m-%dT%H:%M:%S.000Z')'",
                  "triggered_by": "${{ github.actor }}"
                }' \
                --max-time 60 \
                --retry 2; then
                
                echo "✅ Production deployment triggered successfully on attempt $i"
                break
              else
                echo "❌ Deployment trigger failed on attempt $i"
                if [ $i -eq $MAX_ATTEMPTS ]; then
                  echo "🚨 All deployment attempts failed!"
                  exit 1
                fi
                echo "⏳ Waiting ${DELAY}s before retry..."
                sleep $DELAY
              fi
            done
          else
            echo "⚠️ COOLIFY_WEBHOOK_PROD not configured, skipping deployment trigger"
          fi

      - name: 📊 Notify Deployment Status
        if: always()
        run: |
          echo "## 🌟 Production Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Deployment Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`${{ env.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: main" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "- **Versioned Image**: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "### ✅ Status: DEPLOYED" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Production environment updated successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "🌟 **Version ${{ env.VERSION }} is now live!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔗 **Access**: [Production Environment](${{ secrets.PROD_DOMAIN }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "🚨 **Production deployment failed!**" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 5: Smoke Tests em Produção com Retry
  smoke-tests:
    name: 🧪 Production Smoke Tests (with Retry)
    runs-on: ubuntu-latest
    needs: deploy-prod
    if: success()
    timeout-minutes: 15
    
    steps:
      - name: 🧪 Run Production Smoke Tests (with Retry)
        run: |
          echo "🧪 Running smoke tests on production environment..."
          
          if [ -n "${{ secrets.PROD_DOMAIN }}" ]; then
            echo "⏳ Waiting for production deployment to stabilize..."
            sleep 90
            
            MAX_ATTEMPTS=5
            DELAY=20
            
            for i in $(seq 1 $MAX_ATTEMPTS); do
              echo "🔄 Smoke test attempt $i/$MAX_ATTEMPTS..."
              
              if curl -f --retry 5 --retry-delay 15 --retry-connrefused "${{ secrets.PROD_DOMAIN }}/health" && \
                 curl -f --retry 3 --retry-delay 10 --retry-connrefused "${{ secrets.PROD_DOMAIN }}/api/info" && \
                 curl -f --retry 3 --retry-delay 10 --retry-connrefused "${{ secrets.PROD_DOMAIN }}/"; then
                
                echo "✅ All production smoke tests passed on attempt $i!"
                break
              else
                echo "❌ Smoke tests failed on attempt $i"
                if [ $i -eq $MAX_ATTEMPTS ]; then
                  echo "🚨 All smoke test attempts failed!"
                  exit 1
                fi
                echo "⏳ Waiting ${DELAY}s before retry..."
                sleep $DELAY
              fi
            done
            
            # Testes adicionais para produção
            echo "🔍 Testing performance..."
            curl -w "Connect: %{time_connect}s, TTFB: %{time_starttransfer}s, Total: %{time_total}s\n" -o /dev/null -s "${{ secrets.PROD_DOMAIN }}/" || true
            
            echo "✅ All production tests completed!"
          else
            echo "⚠️ PROD_DOMAIN not configured, skipping smoke tests"
          fi

      - name: 📊 Update Summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧪 Production Smoke Tests Results:" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **All production smoke tests passed**" >> $GITHUB_STEP_SUMMARY
            echo "🌟 **Production environment is healthy and performing well**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Production smoke tests failed**" >> $GITHUB_STEP_SUMMARY
            echo "🚨 **Production environment may have critical issues**" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 6: Notificações e Rollback (se necessário)
  post-deploy:
    name: 📢 Post-Deploy Actions
    runs-on: ubuntu-latest
    needs: [deploy-prod, smoke-tests]
    if: always()
    
    steps:
      - name: 🏷️ Get version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: 🎉 Success Notification
        if: needs.deploy-prod.result == 'success' && needs.smoke-tests.result == 'success'
        run: |
          echo "## 🎉 Production Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌟 Version ${{ env.VERSION }} is now live!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Deployment completed successfully**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **All smoke tests passed**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Production environment is healthy**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Registry Information:" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest Image**: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Image**: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Production URL**: ${{ secrets.PROD_DOMAIN }}" >> $GITHUB_STEP_SUMMARY

      - name: 🚨 Failure Notification
        if: needs.deploy-prod.result == 'failure' || needs.smoke-tests.result == 'failure'
        run: |
          echo "## 🚨 Production Deployment Failed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ❌ Critical Issue Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚨 **Production deployment or smoke tests failed**" >> $GITHUB_STEP_SUMMARY
          echo "🔍 **Please check the logs and consider rollback**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔄 Rollback Options:" >> $GITHUB_STEP_SUMMARY
          echo "Available images in registry for rollback:" >> $GITHUB_STEP_SUMMARY
          echo "- Previous latest: Check registry history" >> $GITHUB_STEP_SUMMARY
          echo "- Specific version: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:[VERSION]" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review deployment logs" >> $GITHUB_STEP_SUMMARY
          echo "2. Check application health" >> $GITHUB_STEP_SUMMARY
          echo "3. Consider rolling back to previous version" >> $GITHUB_STEP_SUMMARY
          echo "4. Investigate and fix issues" >> $GITHUB_STEP_SUMMARY
          
          # Aqui você pode adicionar lógica de rollback automático se necessário
          exit 1 