name: 🚀 CI Pipeline - Status App

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]

env:
  NODE_VERSION: '22'

jobs:
  # Job 1: Testes e Cobertura de Código
  test:
    name: 🧪 Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --force

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🧪 Run tests with coverage
        run: npm run test:coverage
        env:
          CI: true

      - name: 📊 Coverage Report Comment
        uses: romeovs/lcov-reporter-action@v0.3.1
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

      - name: 📈 Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

  # Job 2: Build Docker Container
  docker-build:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔨 Build Docker image
        run: |
          docker build \
            --build-arg VITE_ENVIRONMENT=prod \
            --build-arg VITE_APP_VERSION=${{ github.sha }} \
            --build-arg VITE_BUILD_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z") \
            -t fiap-react-deploy:${{ github.sha }} \
            -t fiap-react-deploy:latest \
            .

      - name: 🏥 Test Docker Container
        run: |
          echo "🚀 Starting container..."
          docker run -d --name test-container -p 8080:8080 fiap-react-deploy:latest
          
          echo "⏳ Waiting for container to be ready..."
          sleep 15
          
          echo "🔍 Testing health check endpoint..."
          curl -f http://localhost:8080/health || exit 1
          
          echo "🔍 Testing API info endpoint..."
          curl -f http://localhost:8080/api/info || exit 1
          
          echo "🔍 Testing main application..."
          curl -f http://localhost:8080/ || exit 1
          
          echo "🛑 Stopping test container..."
          docker stop test-container
          docker rm test-container
          
          echo "✅ Docker container tests passed!"

  # Job 3: Final Report
  report:
    name: 📋 CI Report
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: always()
    
    steps:
      - name: 📊 Generate CI Report
        run: |
          echo "## 🚀 CI Pipeline Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Validações Executadas:" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 **Testes da Aplicação**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **Cobertura de Código**: ${{ needs.test.result == 'success' && '✅ ≥80%' || '❌ <80%' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 **Build do Container**: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Informações do Build:" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Autor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY

      - name: ✅ Success Notification
        if: needs.test.result == 'success' && needs.docker-build.result == 'success'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎉 Status: APROVADO" >> $GITHUB_STEP_SUMMARY
          echo "✅ Todos os testes passaram" >> $GITHUB_STEP_SUMMARY
          echo "✅ Cobertura de código ≥80%" >> $GITHUB_STEP_SUMMARY
          echo "✅ Container Docker buildado com sucesso" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Pull Request aprovado para merge!**" >> $GITHUB_STEP_SUMMARY

      - name: ❌ Failure Notification
        if: needs.test.result == 'failure' || needs.docker-build.result == 'failure'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ❌ Status: REPROVADO" >> $GITHUB_STEP_SUMMARY
          echo "🔍 Verifique os logs dos jobs que falharam:" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test.result }}" == "failure" ]; then
            echo "- ❌ Testes ou cobertura de código falharam" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.docker-build.result }}" == "failure" ]; then
            echo "- ❌ Build do Docker container falhou" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚫 **Pull Request deve ser corrigido antes do merge**" >> $GITHUB_STEP_SUMMARY
          exit 1 