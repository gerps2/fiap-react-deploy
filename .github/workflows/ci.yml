name: 🧪 CI Pipeline - Tests & Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ develop ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'

permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read

env:
  NODE_VERSION: '22'

jobs:
  # Job 1: Validação de PR para Main
  pr-validation:
    name: 🔍 PR Validation for Main
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Validate PR Title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "🔍 Validating PR title: $PR_TITLE"
          
          # Verificar se tem versão no título (v1.2.3 formato)
          if echo "$PR_TITLE" | grep -qE 'v[0-9]+\.[0-9]+\.[0-9]+'; then
            VERSION=$(echo "$PR_TITLE" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | head -1)
            echo "✅ Versão encontrada no título: $VERSION"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "❌ PR para main deve incluir versão no título (ex: 'v1.2.3: Nova feature')"
            echo ""
            echo "📋 Formato esperado:"
            echo "  v1.2.3: Descrição da mudança"
            echo "  v2.0.0: Breaking change"
            echo "  v1.2.4: Hotfix crítico"
            exit 1
          fi

      - name: 🔍 Validate Source Branch
        run: |
          SOURCE_BRANCH="${{ github.head_ref }}"
          echo "🔍 Source branch: $SOURCE_BRANCH"
          
          # Verificar se vem de develop, release/ ou hotfix/
          if [[ "$SOURCE_BRANCH" == "develop" ]] || \
             [[ "$SOURCE_BRANCH" == release/* ]] || \
             [[ "$SOURCE_BRANCH" == hotfix/* ]]; then
            echo "✅ Source branch válida: $SOURCE_BRANCH"
          else
            echo "❌ PRs para main devem vir de:"
            echo "  - develop (releases normais)"
            echo "  - release/* (releases com preparação)"
            echo "  - hotfix/* (correções urgentes)"
            echo ""
            echo "Branch atual: $SOURCE_BRANCH"
            exit 1
          fi

  # Job 2: Testes e Cobertura de Código
  test:
    name: 🧪 Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --force

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🧪 Run tests with coverage
        run: npm run test:coverage
        env:
          CI: true

      - name: 📊 Coverage Report Comment
        uses: romeovs/lcov-reporter-action@v0.3.1
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

      - name: 📈 Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

  # Job 3: Build Docker Container (mais rigoroso para main)
  docker-build:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔨 Build Docker image
        run: |
          BUILD_ENV="test"
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            BUILD_ENV="production"
          fi
          
          docker build \
            --build-arg VITE_ENVIRONMENT=$BUILD_ENV \
            --build-arg VITE_APP_VERSION=${{ github.sha }} \
            --build-arg VITE_BUILD_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z") \
            -t fiap-react-deploy:${{ github.sha }} \
            -t fiap-react-deploy:latest \
            .

      - name: 🏥 Test Docker Container
        run: |
          echo "🚀 Starting container..."
          docker run -d --name test-container -p 8080:8080 fiap-react-deploy:latest
          
          echo "⏳ Waiting for container to be ready..."
          sleep 15
          
          echo "🔍 Testing health check endpoint..."
          curl -f http://localhost:8080/health || exit 1
          
          echo "🔍 Testing API info endpoint..."
          curl -f http://localhost:8080/api/info || exit 1
          
          echo "🔍 Testing main application..."
          curl -f http://localhost:8080/ || exit 1
          
          echo "🛑 Stopping test container..."
          docker stop test-container
          docker rm test-container
          
          echo "✅ Docker container tests passed!"

  # Job 4: Final Report
  report:
    name: 📋 CI Report
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: always()
    
    steps:
      - name: 📊 Generate CI Report
        run: |
          echo "## 🧪 CI Pipeline Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Validações Executadas:" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 **Testes da Aplicação**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **Cobertura de Código**: ${{ needs.test.result == 'success' && '✅ ≥80%' || '❌ <80%' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 **Build do Container**: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Informações do Build:" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: \`${{ github.base_ref || 'N/A' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Autor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          
          # Informações específicas para PR para main
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🌟 **PR para PRODUÇÃO**" >> $GITHUB_STEP_SUMMARY
            echo "- 🏷️ **Tag automática** será criada após merge" >> $GITHUB_STEP_SUMMARY
            echo "- 🚀 **Deploy automático** será executado via Coolify" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 **Monitoramento** será ativado automaticamente" >> $GITHUB_STEP_SUMMARY
          fi

      - name: ✅ Success Notification
        if: needs.test.result == 'success' && needs.docker-build.result == 'success'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎉 Status: APROVADO" >> $GITHUB_STEP_SUMMARY
          echo "✅ Todos os testes passaram" >> $GITHUB_STEP_SUMMARY
          echo "✅ Cobertura de código ≥80%" >> $GITHUB_STEP_SUMMARY
          echo "✅ Container Docker buildado com sucesso" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Código aprovado para merge!**" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.base_ref }}" == "main" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **ATENÇÃO**: Merge para main irá:" >> $GITHUB_STEP_SUMMARY
            echo "1. 🏷️ Criar tag automaticamente" >> $GITHUB_STEP_SUMMARY
            echo "2. 🚀 Iniciar deploy em produção" >> $GITHUB_STEP_SUMMARY
            echo "3. 📊 Ativar monitoramento" >> $GITHUB_STEP_SUMMARY
          fi

      - name: ❌ Failure Notification
        if: needs.test.result == 'failure' || needs.docker-build.result == 'failure'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ❌ Status: REPROVADO" >> $GITHUB_STEP_SUMMARY
          echo "🔍 Verifique os logs dos jobs que falharam:" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test.result }}" == "failure" ]; then
            echo "- ❌ Testes ou cobertura de código falharam" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.docker-build.result }}" == "failure" ]; then
            echo "- ❌ Build do Docker container falhou" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚫 **Código deve ser corrigido antes do merge**" >> $GITHUB_STEP_SUMMARY
          exit 1 