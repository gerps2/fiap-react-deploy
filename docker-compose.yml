version: '3.8'

services:
  # Aplicação React
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VITE_ENVIRONMENT=${ENVIRONMENT:-production}
        - VITE_APP_VERSION=${APP_VERSION:-latest}
        - VITE_BUILD_TIMESTAMP=${BUILD_TIMESTAMP}
        - VITE_LOGROCKET_ID=${VITE_LOGROCKET_ID}
        - VITE_API_URL=${VITE_API_URL}
    ports:
      - "${PORT:-8080}:8080"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    labels:
      # Labels para Coolify
      - "coolify.managed=true"
      - "coolify.version=1.0"
      - "coolify.name=fiap-react-deploy"
      - "coolify.description=Status App FIAP - Painel de Diagnóstico do Deploy"
      # Labels para Traefik (se usado)
      - "traefik.enable=true"
      - "traefik.http.routers.fiap-react.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.fiap-react.tls=true"
      - "traefik.http.routers.fiap-react.tls.certresolver=letsencrypt"
      - "traefik.http.services.fiap-react.loadbalancer.server.port=8080"
    networks:
      - app-network

  # Nginx para servir arquivos estáticos (opcional para CDN)
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=reverse-proxy"
    networks:
      - app-network
    profiles:
      - nginx

networks:
  app-network:
    driver: bridge
    labels:
      - "coolify.managed=true"

# Volumes para persistência (se necessário no futuro)
volumes:
  app-data:
    driver: local
    labels:
      - "coolify.managed=true" 